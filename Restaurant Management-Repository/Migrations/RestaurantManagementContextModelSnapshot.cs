// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantManagement_Repository.Context;

#nullable disable

namespace Restaurant_Management_Repository.Migrations
{
    [DbContext(typeof(RestaurantManagementContext))]
    partial class RestaurantManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", t =>
                        {
                            t.HasCheckConstraint("Email", "([Email] like '%@GMAIL%' OR [Email] like '%@HOTMAIL%' OR [Email] like '%@ICLOUD%')");

                            t.HasCheckConstraint("Name", "(NOT [Name] like '%[0-9]%' AND NOT [Name] like '%[^A-Za-z]%')");

                            t.HasCheckConstraint("Password", "(len([Password])=(11) AND [Password] like '%[0-9]%' AND [Password] like '%[A-Za-z]%' AND [Password] like '%[^A-Za-z]%')");

                            t.HasCheckConstraint("PhoneNumber", "([PhoneNumber] like '+%' AND len([PhoneNumber])=(13) AND [PhoneNumber] like '%[0-9]%')");
                        });
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee", t =>
                        {
                            t.HasCheckConstraint("Email", "([Email] like '%@GMAIL%' OR [Email] like '%@HOTMAIL%' OR [Email] like '%@ICLOUD%')")
                                .HasName("Email1");

                            t.HasCheckConstraint("Name", "(NOT [Name] like '%[0-9]%' AND NOT [Name] like '%[^A-Za-z]%')")
                                .HasName("Name1");

                            t.HasCheckConstraint("Password", "(len([Password])=(11) AND [Password] like '%[0-9]%' AND [Password] like '%[A-Za-z]%' AND [Password] like '%[^A-Za-z]%')")
                                .HasName("Password1");

                            t.HasCheckConstraint("Position", "(NOT [Position] like '%[0-9]%' AND NOT [Position] like '%[^A-Za-z]%')");
                        });
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.EmployeeOrder", b =>
                {
                    b.Property<int>("EmployeeOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeOrderId"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeOrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.ToTable("EmployeeOrder");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("MenuId");

                    b.ToTable("Menu", t =>
                        {
                            t.HasCheckConstraint("Description", "([Description] like '%[0-9]%' AND NOT [Description] like '%[^A-Za-z]%')");

                            t.HasCheckConstraint("Name", "(NOT [Name] like '%[0-9]%' AND NOT [Name] like '%[^A-Za-z]%')")
                                .HasName("Name2");
                        });
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TableId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", t =>
                        {
                            t.HasCheckConstraint("Quantity", "Quantity >= 0");
                        });
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Table", t =>
                        {
                            t.HasCheckConstraint("TableNumber", "TableNumber >= 0");
                        });
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.EmployeeOrder", b =>
                {
                    b.HasOne("RestaurantManagement_Repository.Model.Entity.Employee", "Employee")
                        .WithMany("EmployeeOrder")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RestaurantManagement_Repository.Model.Entity.Order", "Order")
                        .WithMany("EmployeeOrder")
                        .HasForeignKey("OrderId");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Order", b =>
                {
                    b.HasOne("RestaurantManagement_Repository.Model.Entity.Customer", "Customer")
                        .WithMany("OrderCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantManagement_Repository.Model.Entity.Table", "Table")
                        .WithMany("Order")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.OrderItem", b =>
                {
                    b.HasOne("RestaurantManagement_Repository.Model.Entity.Menu", "Menu")
                        .WithMany("OrderItem")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantManagement_Repository.Model.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Table", b =>
                {
                    b.HasOne("RestaurantManagement_Repository.Model.Entity.Employee", "Employee")
                        .WithMany("Table")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Customer", b =>
                {
                    b.Navigation("OrderCustomer");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Employee", b =>
                {
                    b.Navigation("EmployeeOrder");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Menu", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Order", b =>
                {
                    b.Navigation("EmployeeOrder");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RestaurantManagement_Repository.Model.Entity.Table", b =>
                {
                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
